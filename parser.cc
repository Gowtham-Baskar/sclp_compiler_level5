// Generated by Bisonc++ V4.10.01 on Wed, 22 Mar 2017 23:52:40 +0530

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {297, 2}, // 1: program ->  declaration_list procedure_definition
     {298, 1}, // 2: declaration_list ->  procedure_declaration
     {298, 2}, // 3: declaration_list ->  variable_declaration_list procedure_declaration
     {298, 2}, // 4: declaration_list ->  procedure_declaration variable_declaration_list
     {300, 5}, // 5: procedure_declaration (VOID) ->  VOID NAME '(' ')' ';'
     {299, 9}, // 6: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 statement_list '}'
     {301, 0}, // 7: #0001 ->  <empty>
     {302, 0}, // 8: #0002 ->  <empty>
     {303, 0}, // 9: optional_variable_declaration_list ->  <empty>
     {303, 1}, // 10: optional_variable_declaration_list ->  variable_declaration_list
     {304, 1}, // 11: variable_declaration_list ->  variable_declaration
     {304, 2}, // 12: variable_declaration_list ->  variable_declaration_list variable_declaration
     {305, 3}, // 13: variable_declaration (';') ->  variable_type variable_list ';'
     {306, 1}, // 14: variable_type (INTEGER) ->  INTEGER
     {306, 1}, // 15: variable_type (FLOAT) ->  FLOAT
     {307, 1}, // 16: variable_list ->  variable_name
     {307, 3}, // 17: variable_list (',') ->  variable_list ',' variable_name
     {308, 1}, // 18: variable_name (NAME) ->  NAME
     {309, 0}, // 19: statement_list ->  <empty>
     {309, 2}, // 20: statement_list ->  statement_list statement
     {310, 1}, // 21: statement ->  selection_statement
     {310, 1}, // 22: statement ->  assignment_statement
     {310, 1}, // 23: statement ->  iterative_statement
     {310, 3}, // 24: statement ('{') ->  '{' statement_list '}'
     {311, 5}, // 25: selection_statement (THEN) ->  IF '(' boolean_expression ')' statement
     {311, 7}, // 26: selection_statement (IF) ->  IF '(' boolean_expression ')' statement ELSE statement
     {312, 5}, // 27: iterative_statement (WHILE) ->  WHILE '(' boolean_expression ')' statement
     {312, 7}, // 28: iterative_statement (DO) ->  DO statement WHILE '(' boolean_expression ')' ';'
     {313, 3}, // 29: boolean_expression (OR) ->  boolean_expression OR boolean_expression
     {313, 3}, // 30: boolean_expression (AND) ->  boolean_expression AND boolean_expression
     {313, 2}, // 31: boolean_expression (NOT) ->  NOT boolean_expression
     {313, 3}, // 32: boolean_expression ('(') ->  '(' boolean_expression ')'
     {313, 1}, // 33: boolean_expression ->  relational_expression
     {314, 3}, // 34: relational_expression (LT) ->  operand LT operand
     {314, 3}, // 35: relational_expression (LE) ->  operand LE operand
     {314, 3}, // 36: relational_expression (GT) ->  operand GT operand
     {314, 3}, // 37: relational_expression (GE) ->  operand GE operand
     {314, 3}, // 38: relational_expression (EQ) ->  operand EQ operand
     {314, 3}, // 39: relational_expression (NE) ->  operand NE operand
     {315, 4}, // 40: assignment_statement (ASSIGN) ->  variable ASSIGN arith_expression ';'
     {316, 3}, // 41: arith_expression ('+') ->  operand '+' operand
     {316, 3}, // 42: arith_expression ('-') ->  operand '-' operand
     {316, 3}, // 43: arith_expression ('*') ->  operand '*' operand
     {316, 3}, // 44: arith_expression ('/') ->  operand '/' operand
     {316, 2}, // 45: arith_expression (UMINUS) ->  '-' operand
     {316, 5}, // 46: arith_expression ('?') ->  boolean_expression '?' operand ':' operand
     {316, 3}, // 47: arith_expression ('(') ->  '(' operand ')'
     {316, 1}, // 48: arith_expression ->  expression_term
     {317, 1}, // 49: operand ->  arith_expression
     {318, 1}, // 50: expression_term ->  variable
     {318, 1}, // 51: expression_term ->  constant
     {319, 1}, // 52: variable (NAME) ->  NAME
     {320, 1}, // 53: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
     {320, 1}, // 54: constant (DOUBLE_NUMBER) ->  DOUBLE_NUMBER
     {321, 1}, // 55: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 10} },                             
    { {       297}, {  1} }, // program                  
    { {       298}, {  2} }, // declaration_list         
    { {       300}, {  3} }, // procedure_declaration    
    { {       304}, {  4} }, // variable_declaration_list
    { {       263}, {  5} }, // VOID                     
    { {       305}, {  6} }, // variable_declaration     
    { {       306}, {  7} }, // variable_type            
    { {       260}, {  8} }, // INTEGER                  
    { {       261}, {  9} }, // FLOAT                    
    { {         0}, {  0} },                             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, {  3} },                        
    { {       299}, { 10} }, // procedure_definition
    { {       259}, { 11} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  6} },                             
    { {     304}, { 12} }, // variable_declaration_list
    { {     305}, {  6} }, // variable_declaration     
    { {     306}, {  7} }, // variable_type            
    { {     260}, {  8} }, // INTEGER                  
    { {     261}, {  9} }, // FLOAT                    
    { {       0}, { -2} },                             
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, {  7} },                         
    { {       300}, { 13} }, // procedure_declaration
    { {       305}, { 14} }, // variable_declaration 
    { {       263}, {  5} }, // VOID                 
    { {       306}, {  7} }, // variable_type        
    { {       260}, {  8} }, // INTEGER              
    { {       261}, {  9} }, // FLOAT                
    { {         0}, {  0} },                         
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       259}, { 15} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_6[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  4} },                 
    { {       307}, { 16} }, // variable_list
    { {       308}, { 17} }, // variable_name
    { {       259}, { 18} }, // NAME         
    { {         0}, {  0} },                 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 19} }, // '('
    { {         0}, {  0} },       
};

SR__ s_12[] =
{
    { { REQ_DEF}, {  5} },                        
    { {     305}, { 14} }, // variable_declaration
    { {     306}, {  7} }, // variable_type       
    { {     260}, {  8} }, // INTEGER             
    { {     261}, {  9} }, // FLOAT               
    { {       0}, { -4} },                        
};

SR__ s_13[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 20} }, // '('
    { {         0}, {  0} },       
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 21} }, // ';'
    { {        44}, { 22} }, // ','
    { {         0}, {  0} },       
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 23} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 24} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  3} },                 
    { {       308}, { 25} }, // variable_name
    { {       259}, { 18} }, // NAME         
    { {         0}, {  0} },                 
};

SR__ s_23[] =
{
    { { DEF_RED}, {  2} },         
    { {     301}, { 26} }, // #0001
    { {       0}, { -7} },         
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 27} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 28} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_27[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_28[] =
{
    { { REQ_DEF}, {  7} },                                      
    { {     303}, { 29} }, // optional_variable_declaration_list
    { {     304}, { 30} }, // variable_declaration_list         
    { {     305}, {  6} }, // variable_declaration              
    { {     306}, {  7} }, // variable_type                     
    { {     260}, {  8} }, // INTEGER                           
    { {     261}, {  9} }, // FLOAT                             
    { {       0}, { -9} },                                      
};

SR__ s_29[] =
{
    { { DEF_RED}, {  2} },         
    { {     302}, { 31} }, // #0002
    { {       0}, { -8} },         
};

SR__ s_30[] =
{
    { { REQ_DEF}, {   5} },                        
    { {     305}, {  14} }, // variable_declaration
    { {     306}, {   7} }, // variable_type       
    { {     260}, {   8} }, // INTEGER             
    { {     261}, {   9} }, // FLOAT               
    { {       0}, { -10} },                        
};

SR__ s_31[] =
{
    { { DEF_RED}, {   2} },                  
    { {     309}, {  32} }, // statement_list
    { {       0}, { -19} },                  
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, { 12} },                        
    { {       125}, { 33} }, // '}'                 
    { {       310}, { 34} }, // statement           
    { {       311}, { 35} }, // selection_statement 
    { {       315}, { 36} }, // assignment_statement
    { {       312}, { 37} }, // iterative_statement 
    { {       123}, { 38} }, // '{'                 
    { {       264}, { 39} }, // IF                  
    { {       319}, { 40} }, // variable            
    { {       265}, { 41} }, // WHILE               
    { {       266}, { 42} }, // DO                  
    { {       259}, { 43} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_33[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   2} },                  
    { {     309}, {  44} }, // statement_list
    { {       0}, { -19} },                  
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 45} }, // '('
    { {         0}, {  0} },       
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       262}, { 46} }, // ASSIGN
    { {         0}, {  0} },          
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 47} }, // '('
    { {         0}, {  0} },       
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, { 11} },                        
    { {       310}, { 48} }, // statement           
    { {       311}, { 35} }, // selection_statement 
    { {       315}, { 36} }, // assignment_statement
    { {       312}, { 37} }, // iterative_statement 
    { {       123}, { 38} }, // '{'                 
    { {       264}, { 39} }, // IF                  
    { {       319}, { 40} }, // variable            
    { {       265}, { 41} }, // WHILE               
    { {       266}, { 42} }, // DO                  
    { {       259}, { 43} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, { 12} },                        
    { {       125}, { 49} }, // '}'                 
    { {       310}, { 34} }, // statement           
    { {       311}, { 35} }, // selection_statement 
    { {       315}, { 36} }, // assignment_statement
    { {       312}, { 37} }, // iterative_statement 
    { {       123}, { 38} }, // '{'                 
    { {       264}, { 39} }, // IF                  
    { {       319}, { 40} }, // variable            
    { {       265}, { 41} }, // WHILE               
    { {       266}, { 42} }, // DO                  
    { {       259}, { 43} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       313}, { 50} }, // boolean_expression   
    { {       278}, { 51} }, // NOT                  
    { {        40}, { 52} }, // '('                  
    { {       314}, { 53} }, // relational_expression
    { {       317}, { 54} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       318}, { 57} }, // expression_term      
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       316}, { 62} }, // arith_expression     
    { {       317}, { 54} }, // operand              
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       313}, { 64} }, // boolean_expression   
    { {       278}, { 51} }, // NOT                  
    { {        40}, { 52} }, // '('                  
    { {       314}, { 53} }, // relational_expression
    { {       317}, { 54} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       318}, { 57} }, // expression_term      
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       265}, { 65} }, // WHILE
    { {         0}, {  0} },         
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  5} },       
    { {        41}, { 66} }, // ')'
    { {       269}, { 67} }, // OR 
    { {       270}, { 68} }, // AND
    { {        63}, { 69} }, // '?'
    { {         0}, {  0} },       
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       313}, { 70} }, // boolean_expression   
    { {       278}, { 51} }, // NOT                  
    { {        40}, { 52} }, // '('                  
    { {       314}, { 53} }, // relational_expression
    { {       317}, { 54} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       318}, { 57} }, // expression_term      
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       313}, { 71} }, // boolean_expression   
    { {       317}, { 72} }, // operand              
    { {       278}, { 51} }, // NOT                  
    { {        40}, { 52} }, // '('                  
    { {       314}, { 53} }, // relational_expression
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       318}, { 57} }, // expression_term      
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 11} },       
    { {       273}, { 73} }, // LT 
    { {       274}, { 74} }, // LE 
    { {       275}, { 75} }, // GT 
    { {       276}, { 76} }, // GE 
    { {       271}, { 77} }, // EQ 
    { {       272}, { 78} }, // NE 
    { {        43}, { 79} }, // '+'
    { {        45}, { 80} }, // '-'
    { {        42}, { 81} }, // '*'
    { {        47}, { 82} }, // '/'
    { {         0}, {  0} },       
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 83} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_62[] =
{
    { { REQ_DEF}, {   2} },       
    { {      59}, {  84} }, // ';'
    { {       0}, { -49} },       
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  4} },       
    { {        63}, { 69} }, // '?'
    { {       269}, { 67} }, // OR 
    { {       270}, { 68} }, // AND
    { {         0}, {  0} },       
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {  5} },       
    { {        41}, { 85} }, // ')'
    { {       269}, { 67} }, // OR 
    { {       270}, { 68} }, // AND
    { {        63}, { 69} }, // '?'
    { {         0}, {  0} },       
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 86} }, // '('
    { {         0}, {  0} },       
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, { 11} },                        
    { {       310}, { 87} }, // statement           
    { {       311}, { 35} }, // selection_statement 
    { {       315}, { 36} }, // assignment_statement
    { {       312}, { 37} }, // iterative_statement 
    { {       123}, { 38} }, // '{'                 
    { {       264}, { 39} }, // IF                  
    { {       319}, { 40} }, // variable            
    { {       265}, { 41} }, // WHILE               
    { {       266}, { 42} }, // DO                  
    { {       259}, { 43} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       313}, { 88} }, // boolean_expression   
    { {       278}, { 51} }, // NOT                  
    { {        40}, { 52} }, // '('                  
    { {       314}, { 53} }, // relational_expression
    { {       317}, { 54} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       318}, { 57} }, // expression_term      
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       313}, { 89} }, // boolean_expression   
    { {       278}, { 51} }, // NOT                  
    { {        40}, { 52} }, // '('                  
    { {       314}, { 53} }, // relational_expression
    { {       317}, { 54} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       318}, { 57} }, // expression_term      
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 90} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_70[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  5} },       
    { {        41}, { 91} }, // ')'
    { {       269}, { 67} }, // OR 
    { {       270}, { 68} }, // AND
    { {        63}, { 69} }, // '?'
    { {         0}, {  0} },       
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, { 12} },       
    { {        41}, { 92} }, // ')'
    { {       273}, { 73} }, // LT 
    { {       274}, { 74} }, // LE 
    { {       275}, { 75} }, // GT 
    { {       276}, { 76} }, // GE 
    { {       271}, { 77} }, // EQ 
    { {       272}, { 78} }, // NE 
    { {        43}, { 79} }, // '+'
    { {        45}, { 80} }, // '-'
    { {        42}, { 81} }, // '*'
    { {        47}, { 82} }, // '/'
    { {         0}, {  0} },       
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 93} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 94} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 95} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 96} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 97} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 98} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       317}, { 99} }, // operand              
    { {       316}, { 55} }, // arith_expression     
    { {        45}, { 56} }, // '-'                  
    { {       313}, { 63} }, // boolean_expression   
    { {        40}, { 52} }, // '('                  
    { {       318}, { 57} }, // expression_term      
    { {       278}, { 51} }, // NOT                  
    { {       314}, { 53} }, // relational_expression
    { {       319}, { 58} }, // variable             
    { {       320}, { 59} }, // constant             
    { {       259}, { 43} }, // NAME                 
    { {       257}, { 60} }, // INTEGER_NUMBER       
    { {       258}, { 61} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       317}, { 100} }, // operand              
    { {       316}, {  55} }, // arith_expression     
    { {        45}, {  56} }, // '-'                  
    { {       313}, {  63} }, // boolean_expression   
    { {        40}, {  52} }, // '('                  
    { {       318}, {  57} }, // expression_term      
    { {       278}, {  51} }, // NOT                  
    { {       314}, {  53} }, // relational_expression
    { {       319}, {  58} }, // variable             
    { {       320}, {  59} }, // constant             
    { {       259}, {  43} }, // NAME                 
    { {       257}, {  60} }, // INTEGER_NUMBER       
    { {       258}, {  61} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       317}, { 101} }, // operand              
    { {       316}, {  55} }, // arith_expression     
    { {        45}, {  56} }, // '-'                  
    { {       313}, {  63} }, // boolean_expression   
    { {        40}, {  52} }, // '('                  
    { {       318}, {  57} }, // expression_term      
    { {       278}, {  51} }, // NOT                  
    { {       314}, {  53} }, // relational_expression
    { {       319}, {  58} }, // variable             
    { {       320}, {  59} }, // constant             
    { {       259}, {  43} }, // NAME                 
    { {       257}, {  60} }, // INTEGER_NUMBER       
    { {       258}, {  61} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       317}, { 102} }, // operand              
    { {       316}, {  55} }, // arith_expression     
    { {        45}, {  56} }, // '-'                  
    { {       313}, {  63} }, // boolean_expression   
    { {        40}, {  52} }, // '('                  
    { {       318}, {  57} }, // expression_term      
    { {       278}, {  51} }, // NOT                  
    { {       314}, {  53} }, // relational_expression
    { {       319}, {  58} }, // variable             
    { {       320}, {  59} }, // constant             
    { {       259}, {  43} }, // NAME                 
    { {       257}, {  60} }, // INTEGER_NUMBER       
    { {       258}, {  61} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_83[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  11} },                        
    { {       310}, { 103} }, // statement           
    { {       311}, {  35} }, // selection_statement 
    { {       315}, {  36} }, // assignment_statement
    { {       312}, {  37} }, // iterative_statement 
    { {       123}, {  38} }, // '{'                 
    { {       264}, {  39} }, // IF                  
    { {       319}, {  40} }, // variable            
    { {       265}, {  41} }, // WHILE               
    { {       266}, {  42} }, // DO                  
    { {       259}, {  43} }, // NAME                
    { {         0}, {   0} },                        
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       313}, { 104} }, // boolean_expression   
    { {       278}, {  51} }, // NOT                  
    { {        40}, {  52} }, // '('                  
    { {       314}, {  53} }, // relational_expression
    { {       317}, {  54} }, // operand              
    { {       316}, {  55} }, // arith_expression     
    { {        45}, {  56} }, // '-'                  
    { {       318}, {  57} }, // expression_term      
    { {       319}, {  58} }, // variable             
    { {       320}, {  59} }, // constant             
    { {       259}, {  43} }, // NAME                 
    { {       257}, {  60} }, // INTEGER_NUMBER       
    { {       258}, {  61} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_87[] =
{
    { { REQ_DEF}, {   2} },        
    { {     268}, { 105} }, // ELSE
    { {       0}, { -25} },        
};

SR__ s_88[] =
{
    { { REQ_DEF}, {   2} },       
    { {     270}, {  68} }, // AND
    { {       0}, { -29} },       
};

SR__ s_89[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  12} },       
    { {        58}, { 106} }, // ':'
    { {        43}, {  79} }, // '+'
    { {        45}, {  80} }, // '-'
    { {        42}, {  81} }, // '*'
    { {        47}, {  82} }, // '/'
    { {       273}, {  73} }, // LT 
    { {       274}, {  74} }, // LE 
    { {       275}, {  75} }, // GT 
    { {       276}, {  76} }, // GE 
    { {       271}, {  77} }, // EQ 
    { {       272}, {  78} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  79} }, // '+'
    { {      45}, {  80} }, // '-'
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {       0}, { -34} },       
};

SR__ s_94[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  79} }, // '+'
    { {      45}, {  80} }, // '-'
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {       0}, { -35} },       
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  79} }, // '+'
    { {      45}, {  80} }, // '-'
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {       0}, { -36} },       
};

SR__ s_96[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  79} }, // '+'
    { {      45}, {  80} }, // '-'
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {       0}, { -37} },       
};

SR__ s_97[] =
{
    { { REQ_DEF}, {  11} },       
    { {      43}, {  79} }, // '+'
    { {      45}, {  80} }, // '-'
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {     273}, {  73} }, // LT 
    { {     274}, {  74} }, // LE 
    { {     275}, {  75} }, // GT 
    { {     276}, {  76} }, // GE 
    { {     271}, {  77} }, // EQ 
    { {     272}, {  78} }, // NE 
    { {       0}, { -38} },       
};

SR__ s_98[] =
{
    { { REQ_DEF}, {  11} },       
    { {      43}, {  79} }, // '+'
    { {      45}, {  80} }, // '-'
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {     273}, {  73} }, // LT 
    { {     274}, {  74} }, // LE 
    { {     275}, {  75} }, // GT 
    { {     276}, {  76} }, // GE 
    { {     271}, {  77} }, // EQ 
    { {     272}, {  78} }, // NE 
    { {       0}, { -39} },       
};

SR__ s_99[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {       0}, { -41} },       
};

SR__ s_100[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {       0}, { -42} },       
};

SR__ s_101[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_102[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 107} }, // ')'
    { {       269}, {  67} }, // OR 
    { {       270}, {  68} }, // AND
    { {        63}, {  69} }, // '?'
    { {         0}, {   0} },       
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {  11} },                        
    { {       310}, { 108} }, // statement           
    { {       311}, {  35} }, // selection_statement 
    { {       315}, {  36} }, // assignment_statement
    { {       312}, {  37} }, // iterative_statement 
    { {       123}, {  38} }, // '{'                 
    { {       264}, {  39} }, // IF                  
    { {       319}, {  40} }, // variable            
    { {       265}, {  41} }, // WHILE               
    { {       266}, {  42} }, // DO                  
    { {       259}, {  43} }, // NAME                
    { {         0}, {   0} },                        
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       317}, { 109} }, // operand              
    { {       316}, {  55} }, // arith_expression     
    { {        45}, {  56} }, // '-'                  
    { {       313}, {  63} }, // boolean_expression   
    { {        40}, {  52} }, // '('                  
    { {       318}, {  57} }, // expression_term      
    { {       278}, {  51} }, // NOT                  
    { {       314}, {  53} }, // relational_expression
    { {       319}, {  58} }, // variable             
    { {       320}, {  59} }, // constant             
    { {       259}, {  43} }, // NAME                 
    { {       257}, {  60} }, // INTEGER_NUMBER       
    { {       258}, {  61} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 110} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_109[] =
{
    { { REQ_DEF}, {  11} },       
    { {      43}, {  79} }, // '+'
    { {      45}, {  80} }, // '-'
    { {      42}, {  81} }, // '*'
    { {      47}, {  82} }, // '/'
    { {     273}, {  73} }, // LT 
    { {     274}, {  74} }, // LE 
    { {     275}, {  75} }, // GT 
    { {     276}, {  76} }, // GE 
    { {     271}, {  77} }, // EQ 
    { {     272}, {  78} }, // NE 
    { {       0}, { -46} },       
};

SR__ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 77 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         program_object.set_procedure(current_procedure, get_line_number());
         program_object.global_list_in_proc_check();
         }
         }
        break;

        case 2:
#line 90 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = new Symbol_Table();
         program_object.set_global_table(*global_table);
         }
         }
        break;

        case 3:
#line 101 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = d_vsp__[-1].symbol_table;
         CHECK_INVARIANT((global_table != NULL), "Global declarations cannot be null");
         program_object.set_global_table(*global_table);
         }
         }
        break;

        case 4:
#line 115 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = d_vsp__[0].symbol_table;
         CHECK_INVARIANT((global_table != NULL), "Global declarations cannot be null");
         program_object.set_global_table(*global_table);
         }
         }
        break;

        case 5:
#line 130 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-3].string_value != NULL), "Procedure name cannot be null");
         CHECK_INVARIANT((*d_vsp__[-3].string_value == "main"), "Procedure name must be main in declaration");
         }
         }
        break;

        case 6:
#line 173 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Sequence_Ast* seq = d_vsp__[-1].sequence_ast;
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         CHECK_INVARIANT((seq != NULL), "statement list cannot be null");
         current_procedure->set_sequence_ast(*seq);
         }
         }
        break;

        case 7:
#line 141 "parser.yy"
        d_val__ = d_vsp__[-2];
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].string_value != NULL), "Procedure name cannot be null");
         CHECK_INVARIANT((*d_vsp__[-2].string_value == "main"), "Procedure name must be main");
         string proc_name = *d_vsp__[-2].string_value;
         current_procedure = new Procedure(void_data_type, proc_name, get_line_number());
         CHECK_INPUT ((program_object.variable_in_symbol_list_check(proc_name) == false),
         "Procedure name cannot be same as global variable", get_line_number());
         }
         }
        break;

        case 8:
#line 157 "parser.yy"
        d_val__ = d_vsp__[-5];
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         Symbol_Table * local_table = d_vsp__[0].symbol_table;
         if (local_table == NULL)
         local_table = new Symbol_Table();
         current_procedure->set_local_list(*local_table);
         }
         }
        break;

        case 9:
#line 186 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__.symbol_table = NULL;
         }
         }
        break;

        case 10:
#line 194 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].symbol_table != NULL), "Declaration statement list cannot be null here");
         d_val__.symbol_table = d_vsp__[0].symbol_table;
         }
         }
        break;

        case 11:
#line 206 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         std::vector<Symbol_Table_Entry*> * var_decl_list = d_vsp__[0].symbol_entry_list;
         Symbol_Table * decl_list = new Symbol_Table(); 
         CHECK_INVARIANT((decl_list != NULL), "The declaration statement list cannot be null");
         for(int i=0;i<var_decl_list->size();i++){
         Symbol_Table_Entry * decl_stmt = (*var_decl_list)[i];
         CHECK_INVARIANT((decl_stmt != NULL), "Non-terminal declaration statement cannot be null");
         string decl_name = decl_stmt->get_variable_name();
         CHECK_INPUT ((program_object.variable_proc_name_check(decl_name) == false),
         "Variable name cannot be same as the procedure name", get_line_number());
         if(current_procedure != NULL)
         {
         CHECK_INPUT((current_procedure->get_proc_name() != decl_name),
         "Variable name cannot be same as procedure name", get_line_number());
         }
         CHECK_INPUT((decl_list->variable_in_symbol_list_check(decl_name) == false), 
         "Variable is declared twice", get_line_number());
         decl_list->push_symbol(decl_stmt);
         }
         d_val__.symbol_table = decl_list;
         }
         }
        break;

        case 12:
#line 240 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         std::vector<Symbol_Table_Entry*> * var_decl_list = d_vsp__[0].symbol_entry_list;
         Symbol_Table * decl_list = d_vsp__[-1].symbol_table;
         CHECK_INVARIANT((decl_list != NULL), "The declaration statement list cannot be null");
         for(int i=0;i<var_decl_list->size();i++){
         Symbol_Table_Entry * decl_stmt = (*var_decl_list)[i];
         CHECK_INVARIANT((decl_stmt != NULL), "The declaration statement cannot be null");
         string decl_name = decl_stmt->get_variable_name();
         CHECK_INPUT((program_object.variable_proc_name_check(decl_name) == false),
         "Procedure name cannot be same as the variable name", get_line_number());
         if(current_procedure != NULL)
         {
         CHECK_INPUT((current_procedure->get_proc_name() != decl_name),
         "Variable name cannot be same as procedure name", get_line_number());
         }
         CHECK_INPUT((decl_list->variable_in_symbol_list_check(decl_name) == false), 
         "Variable is declared twice", get_line_number());
         decl_list->push_symbol(decl_stmt);
         }
         d_val__.symbol_table = decl_list;
         }
         }
        break;

        case 13:
#line 276 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         Data_Type var_type = d_vsp__[-2].vtype;
         std::vector<string*> *var_list = d_vsp__[-1].vlist;
         std::vector<Symbol_Table_Entry*> * var_decl_list = new std::vector<Symbol_Table_Entry*>();
         for(int i=0;i<var_list->size();i++){
         Symbol_Table_Entry * decl = new Symbol_Table_Entry(*((*var_list)[i]),var_type,get_line_number());
         var_decl_list->push_back(decl);
         }
         d_val__.symbol_entry_list = var_decl_list;
         }
         }
        break;

        case 14:
#line 295 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Data_Type data_type = int_data_type;
         d_val__.vtype = data_type;
         }
         }
        break;

        case 15:
#line 304 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Data_Type data_type = double_data_type;
         d_val__.vtype = data_type;
         }
         }
        break;

        case 16:
#line 315 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         std::vector<string*> * var_list = new std::vector<string*>();
         string* var_name = d_vsp__[0].vname;
         var_list->push_back(var_name);
         d_val__.vlist = var_list;
         }
         }
        break;

        case 17:
#line 326 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         std::vector<string*> * var_list = d_vsp__[-2].vlist;
         string *var_name = d_vsp__[0].vname;
         var_list->push_back(var_name);
         d_val__.vlist = var_list;
         }
         }
        break;

        case 18:
#line 339 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.vname = d_vsp__[0].string_value;
         }
         }
        break;

        case 19:
#line 397 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         Sequence_Ast * statement_list = new Sequence_Ast(get_line_number());
         d_val__.sequence_ast = statement_list;
         }
         }
        break;

        case 20:
#line 409 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         Sequence_Ast * statement_list = d_vsp__[-1].sequence_ast;
         Ast * statement = d_vsp__[0].ast; 
         CHECK_INVARIANT((statement!= NULL), "The statement  cannot be null"); 
         statement_list->ast_push_back(statement);
         d_val__.sequence_ast = statement_list;
         
         }
         }
        break;

        case 21:
#line 427 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 22:
#line 435 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 23:
#line 444 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 24:
#line 453 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[-1].sequence_ast;
         }
         }
        break;

        case 25:
#line 463 "parser.yy"
        {
         if(NOT_ONLY_PARSE) 
         {
         Ast * cond = d_vsp__[-2].ast;
         Ast * then_part = d_vsp__[0].ast;
         Ast * else_part = new Sequence_Ast(get_line_number()); 
         CHECK_INVARIANT((then_part!= NULL), "The then_part  cannot be null"); 
         CHECK_INVARIANT((else_part!= NULL), "The else_part  cannot be null"); 
         Ast * selection_ast = new Selection_Statement_Ast(cond,then_part,else_part,get_line_number());
         d_val__.ast = selection_ast; 
         }
         }
        break;

        case 26:
#line 478 "parser.yy"
        {
         if(NOT_ONLY_PARSE) 
         {
         Ast * cond = d_vsp__[-4].ast;
         Ast * then_part = d_vsp__[-2].ast;
         Ast * else_part = d_vsp__[0].ast;
         Ast * selection_ast = new Selection_Statement_Ast(cond,then_part,else_part,get_line_number());
         d_val__.ast = selection_ast; 
         }
         }
        break;

        case 27:
#line 494 "parser.yy"
        {
         if(NOT_ONLY_PARSE) 
         {
         Ast * cond = d_vsp__[-2].ast;
         Ast * body = d_vsp__[0].ast;
         Ast * iterative_ast = new Iteration_Statement_Ast(cond,body,get_line_number(),false);
         d_val__.ast = iterative_ast; 
         }
         }
        break;

        case 28:
#line 506 "parser.yy"
        {
         if(NOT_ONLY_PARSE) 
         {
         Ast * cond = d_vsp__[-2].ast;
         Ast * body = d_vsp__[-5].ast;
         Ast * iterative_ast = new Iteration_Statement_Ast(cond,body,get_line_number(),true);
         d_val__.ast = iterative_ast; 
         }
         }
        break;

        case 29:
#line 595 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * boolean_expression = new Boolean_Expr_Ast(lhs,boolean_or,rhs,get_line_number());
         d_val__.ast = boolean_expression;
         }
         }
        break;

        case 30:
#line 606 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * boolean_expression = new Boolean_Expr_Ast(lhs,boolean_and,rhs,get_line_number());
         d_val__.ast = boolean_expression;
         }
         }
        break;

        case 31:
#line 617 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * rhs = d_vsp__[0].ast;
         Ast * boolean_expression = new Boolean_Expr_Ast(NULL,boolean_not,rhs,get_line_number());
         d_val__.ast = boolean_expression; 
         }
         }
        break;

        case 32:
#line 627 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[-1].ast; 
         }
         }
        break;

        case 33:
#line 635 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 34:
#line 647 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * relational_expression = new Relational_Expr_Ast(lhs,less_than,rhs,get_line_number());
         relational_expression->check_ast();
         d_val__.ast = relational_expression;
         }
         }
        break;

        case 35:
#line 659 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * relational_expression = new Relational_Expr_Ast(lhs,less_equalto,rhs,get_line_number());
         relational_expression->check_ast();
         d_val__.ast = relational_expression;
         }
         }
        break;

        case 36:
#line 671 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * relational_expression = new Relational_Expr_Ast(lhs,greater_than,rhs,get_line_number());
         relational_expression->check_ast();
         d_val__.ast = relational_expression;
         }
         }
        break;

        case 37:
#line 683 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * relational_expression = new Relational_Expr_Ast(lhs,greater_equalto,rhs,get_line_number());
         relational_expression->check_ast();
         d_val__.ast = relational_expression;
         }
         }
        break;

        case 38:
#line 695 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * relational_expression = new Relational_Expr_Ast(lhs,equalto,rhs,get_line_number());
         relational_expression->check_ast();
         d_val__.ast = relational_expression;
         }
         }
        break;

        case 39:
#line 707 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * relational_expression = new Relational_Expr_Ast(lhs,not_equalto,rhs,get_line_number());
         relational_expression->check_ast();
         d_val__.ast = relational_expression;
         }
         }
        break;

        case 40:
#line 724 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         Ast * lhs = d_vsp__[-3].ast;
         Ast * rhs = d_vsp__[-1].ast;
         Ast * assignment_ast = new Assignment_Ast(lhs,rhs,get_line_number());
         assignment_ast->check_ast();
         d_val__.ast = assignment_ast; 
         }
         }
        break;

        case 41:
#line 739 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * ast = new Plus_Ast(lhs,rhs,get_line_number());
         ast->check_ast(); 
         d_val__.ast = ast;
         }
         }
        break;

        case 42:
#line 751 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * ast = new Minus_Ast(lhs,rhs,get_line_number());
         ast->check_ast(); 
         d_val__.ast = ast;
         
         }
         }
        break;

        case 43:
#line 764 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * ast = new Mult_Ast(lhs,rhs,get_line_number());
         ast->check_ast(); 
         d_val__.ast = ast;
         
         }
         }
        break;

        case 44:
#line 777 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * ast = new Divide_Ast(lhs,rhs,get_line_number());
         ast->check_ast(); 
         d_val__.ast = ast;
         
         }
         }
        break;

        case 45:
#line 790 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[0].ast;
         Ast * ast = new UMinus_Ast(lhs,NULL,get_line_number());
         d_val__.ast = ast;
         
         }
         }
        break;

        case 46:
#line 801 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * cond = d_vsp__[-4].ast;
         Ast * ast = new Conditional_Operator_Ast(cond,lhs,rhs,get_line_number());
         ast->check_ast();
         d_val__.ast = ast;
         }
         }
        break;

        case 47:
#line 814 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[-1].ast;
         }
         }
        break;

        case 48:
#line 822 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[0].ast; 
         }
         }
        break;

        case 49:
#line 837 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         d_val__.ast = d_vsp__[0].ast;
         
         }
         }
        break;

        case 50:
#line 849 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         d_val__.ast = d_vsp__[0].ast; 
         }
         }
        break;

        case 51:
#line 858 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 52:
#line 869 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table_Entry * var_table_entry;
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Variable name cannot be null");
         if (current_procedure->variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = &(current_procedure->get_symbol_table_entry(*d_vsp__[0].string_value));
         else if (program_object.variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = &(program_object.get_symbol_table_entry(*d_vsp__[0].string_value));
         else
         CHECK_INPUT_AND_ABORT(CONTROL_SHOULD_NOT_REACH, "Variable has not been declared", get_line_number());
         d_val__.ast = new Name_Ast(*d_vsp__[0].string_value, *var_table_entry, get_line_number());
         delete d_vsp__[0].string_value;
         }
         }
        break;

        case 53:
#line 896 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         int number = d_vsp__[0].integer_value; 
         Ast * num_ast = new Number_Ast<int>(number,int_data_type,get_line_number());
         d_val__.ast = num_ast;
         }
         }
        break;

        case 54:
#line 907 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         double number = d_vsp__[0].float_value; 
         Ast * num_ast = new Number_Ast<double>(number,double_data_type,get_line_number());
         d_val__.ast = num_ast;
         }
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



